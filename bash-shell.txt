>Etechconsulting LLC All Rights Reserved

02/05/2022
-----------
Introduction to Git and Github :

  Prerequisites
In order to complete this tutorial, you'll need the following:

A command line interface.
A text editor of your choice 
A GitHub account.

What is git:



Git is primarily used via the command-line interface, which we can access with our system terminals.
However, we first need to make sure that we have Git installed on our computers.
https://git-scm.com/downloads.

Click the download link for your specific operating system and then follow through the installation
wizard to get things set up on your computer!

After installing it, start your terminal and type the following command to verify that Git is ready
to be used on your 

>How do you check your git version:
You can check your current version of git by running git --version command in your terminal .
git --version
If everything went well, it should return the Git version that is installed on your computer.



>Working areas in git:
  There are three core areas to git. These are 
  ----------->the Working Area, 
  ----------->the Staging Area (also known as Index), and 
  ----------->the Local Repository. 
  When working in a git repository files and modifications will travel from the 
  Working Area to ----------->the Staging Area and finish at the ----------->Local Repository.

The working area or the working tree:   
What is the working area in git?:
The Working area is the area where you are currently working.

It is where your files live. This area is also known as the “untracked” area of git. Any changes to files will be
marked and seen in the Working Tree. Here if you make changes and do not explicitly save them to
git, you will lose the changes made to your files. This loss of changes occurs because git is not
aware of the files or changes in the Working Area until you tell it to pay attention to them. If
you make changes to files in your working tree git will recognize that they are modified, but until
you tell git “Hey pay attention to these files,” it won’t save anything that goes on in them.
How can you see what is in your Working Tree?:
git status  (to see the files in your working directory)



The Staging Area :
What is the staging area?: 
The Staging Area is when git starts tracking and saving changes that occur in files. These saved changes reflect in the .git directory.
How can you see what is in your Staging Area?:
git status (To see the files in the staging area)



What is a Local git Repository: 
It is an isolated repository stored on your own computer, where you can work on the
local version of your project.

It can also be refered to as everything in your .git directory. 
Mainly what you will see in your Local Repository are all of your commits. It is the area that saves
everything #so don’t delete it.   



Git Repositories:
What is a git repository?:
A Git repository is a container for a project that is tracked by Git.
When working with Git, it's important to be familiar with the term repository. 


Initializing a repository:
  What is the command to initialize a git repo:
  $git init  
  Everything starts from here. The first step is to initialize a new Git repo locally in your project root. You can do so with the command above  
  This command will generate a hidden .git directory for your project, where Git stores all internal tracking data for the current repository.


**************************************************************************************************
Staging and committing code:

Committing is the process in which the changes are 'officially' added to the Git repository. In Git,
we can consider commits to be checkpoints, or snapshots of your project at its current state. In
other words, we basically save the current version of our code in a commit. We can create as many
commits as we need in the commit history, and we can go back and forth between commits to see the
different revisions of our project code. That allows us to efficiently manage our progress and
track the project as it gets developed.

Commits are usually created at logical points as we develop our project, usually after adding in
specific contents, features or modifications (like new functionalities or bug fixes, for example).

*******Before we can commit our code, we need to place it inside the staging area.******



Checking the status While located inside the project folder in our terminal, we can type the
following command to check the status of our repository: 
  git status
  touch file1.yaml
  git status

We can add the untracked project files to
the staging area based on the information from the git status command

At a later point, git status will report any modifications that we made to our tracked files before
we decide to add them to the staging area again

How to add a file to the staging area in Git:
The command below will add a file to the staging area. Just replace filename_here with the name of 
the file you want to add to the staging area from the working area.

$git add file_name

git add file1.yaml 
We can add a specific file to the staging area with the following command:

git add file1.yaml file2.yaml file3.yaml

Instead of having to add the files individually, we can also add all the files inside the project
folder to the staging area at once
in that case use the wildcard . and every file will be added for you.

$git add .

git ls-files --stage (to list all the files in the staging area)


Making commits:
What is a commit? : 
A commit is a snapshot of our code at a particular time, which we are saving to
the commit history of our repository. After adding all the files that we want to track to the
staging area with the `git add` command, we are ready to make a commit

To commit the files from the staging area, we use the following command

git commit -m "Commit message"

Inside the quotes, we should write a commit message which is used to identify it in the commit
history. Write meaningful commit messages.

The commit message should be a descriptive summary of the changes that you are committing to the
repository.

After executing that command, you will get the technical details about the commit printed in the
terminal. And that's basically it, you have successfully made a commit in your project!


How to commit changes (and skip the staging area) in Git:
You can add and commit tracked files with a single command by using the -a and -m options.

$git commit -a -m "your commit message here"




***To create a new commit, you will need to repeat the process of adding files to the staging area
   and then committing them after. Again, it's very useful to use the **git status** command to see
   which files were modified, staged, or untracked.

>Commit history:

To see all the commits that were made for our project, you can use the following command

git log

The logs will show details for each commit, like the author name, the generated hash for the commit,
date and time of the commit, and the commit message that we provided 

# ---------------------------------
# git checkout <commit-hash> Replace <commit-hash> with the actual hash for the specific commit that
# you want to visit, which is listed with the git log command.
# ---------------------------------

How to see a specific commit in Git:
This command shows a specific commit.

Replace commit-id ( <commit-hash>) with the id of the commit that you find in the commit log after the word commit.

$git show commit-id


How to see your commit history including changes in Git:
This command shows the commit's history including all files and their changes:

$git log -p

At this point we are going to configure our github userName and Email to link our git to github. This will enable us to push the codes 
from our local repo to our remote repo and vice versa.
Hints to move our code from local repo to remote repo we do a git push
To move our code from remote repo to local repo we do a git pull or a git clone <remote repo url>

============================================================================================

Configuring Your Name & Email:

What is the command to setup your Git username:
git config --global user.name "yourName" 
example
git config --global user.name "etechconsultingllc"

 What is the command to Confirm that you have set the Git username correctly:
git config --global user.name 
> etechconsultingllc 


What is the command to setup your Git user email:
$ git config --global user.email "etechconsultingllc"  

What is the command to Confirm that you have set the email address correctly in Git:
$ git config --global user.email
>etechconsultingllc
GitHub uses your commit email address to associate commits with your account on GitHub.com.
This command lets you setup the user email address you'll use in your commits.
Setting your email address for every repository on your computer


git remote add origin https://github.com/nforfor/team2.git
git branch -M main
git push -u origin main



connect git to GitHub with SSH.
$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

======================================================================================
git remote add origin https://github.com/tookiewill33/yvan-practice-repo.git
git branch -M main
git push -u origin main
============My git token ==============================
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

===================================git note part 2 =============================================
>Etechconsulting LLC All Rights Reserved

02/05/2022
-----------
Introduction to Git and Github :



How to push changes to a remote repo in Git:
When all your work is ready to be saved on a remote repository, you can push all changes using the command below:

$git push


How to see remote URLs in Git:
You can see all remote repositories for your local repository with this command:

$git remote -v


How to push changes to a remote repo in Git:
When all your work is ready to be saved on a remote repository, you can push all changes using the command below:

$git push

How to fetch remote repo changes in Git:
This command will download the changes from a remote repo but will not perform a merge on your local branch (as git pull does that instead).

$git fetch


How to pull changes from a remote repo in Git:
If other team members are working on your repository, you can retrieve the latest changes made to the remote repository with the command below:

$git pull


How to check remote branches that Git is tracking:
This command shows the name of all remote branches that Git is tracking for the current repository:

$git branch -r


Ignoring files:

To ignore files that you don't want to be tracked or added to the staging area, you can create a
file called .gitignore in your main project folder. Inside of that file, you can list all the file
and folder names that you definitely do not want to track (each ignored file and folder should go
to a new line inside the .gitignore file) 

$touch .gitignore,  list the names or extensions of auto-generated files and folders to to it, commit and push upstream. Do a rfresh and watch what happens



>Branches:

A branch could be interpreted as an individual timeline of our project commits. With Git, we can
create many of these alternative environments (i.e. we can create different branches) so other
versions of our project code can exist and be tracked in parallel That allows us to add new
(experimental, unfinished, and potentially buggy) features in separate branches, without touching
the 'official' stable version of our project code (which is usually kept on the master branch) When
we initialize a repository and start making commits, they are saved to the master branch by
default.

>Creating a new branch: 
You can create a new branch using the following command 
$git branch <new-branch-name>

The new branch that gets created will be the reference to the current state of your repository It's
a good idea to create a **development** branch where you can work on improving your code, adding
new experimental features, and similar. After development and testing these new features to make
sure they don't have any bugs and that they can be used, you can merge them to the master branch.


>Changing branches

To switch to a different branch, you use the git checkout command:

$git checkout <branch-name>
$git checkout master:

With that, you switch to a different isolated timeline of your project by changing branches.

For example, you could be working on different features in your code and have a separate branch for
each feature. When you switch to a branch, you can commit code changes which only affect that
particular branch. Then, you can switch to another branch to work on a different feature, which
won't be affected by the changes and commits made from the previous branch.
For example, you could be working on different features in your code and have a separate branch for each feature. When you
switch to a branch, you can commit code changes which only affect that particular branch. Then, you
can switch to another branch to work on a different feature, which won't be affected by the changes
and commits made from the previous branch. To create a new branch and change to it at the same
time, you can use the -b flag:

$git checkout -b <new-branch-name>

To list the branches for your project, use this command: `git branch` To go back to the master
branch, use this command:

$git branch (to list branches for your project )

$git checkout master

>Merging branches

You can merge branches in situations where you want to implement the code changes that you made in
an individual branch to a different branch. For example, after you fully implemented and tested a
new feature in your code, you would want to merge those changes to the stable branch of your
project (which is usually the default master branch). To merge the changes from a different branch
into your current branch, you can use this command 

$git merge <branch-name>

You would replace <branch-name> with the branch that you want to integrate into your current branch




>Deleting a branch

To delete a branch, you can run the git branch command with the -d flag

$git branch -d <branch-name>


How to show the commit log as a graph in Git:
We can use --graph to get the commit log to show as a graph. Also,
--oneline will limit commit messages to a single line.

$git log --graph --oneline


How to show the commit log as a graph of all branches in Git:
Does the same as the command above, but for all branches.

$git log --graph --oneline --all

How to abort a conflicting merge in Git:
If you want to throw a merge away and start over, you can run the following command:

$git merge --abort



How to add a remote repository in Git:
This command adds a remote repository to your local repository (just replace https://repo_here with your remote repo URL).

$git add remote https://repo_here


How to get more info about a remote repo in Git:
Just replace origin with the name of the remote obtained by
running the git remote -v command.

$git remote show origin





How to check remote branches that Git is tracking:
This command shows the name of all remote branches that Git is tracking for the current repository:

$git branch -r




How to check the current commits log of a remote repo in Git
Commit after commit, Git builds up a log. You can find out the remote repository log by using this command:

$git log origin/main

How to merge a remote repo with your local repo in Git:
If the remote repository has changes you want to merge with your local, then this command will do that for you:

$git merge origin/main


How to get the contents of remote branches in Git without automatically merging:
This lets you update the remote without merging any content into the
local branches. You can call git merge or git checkout to do the merge.

$git remote update


How to push a new branch to a remote repo in Git:
If you want to push a branch to a remote repository you can use the command below. Just remember to add -u to create the branch upstream:

git push -u origin branch_name


How to remove a remote branch in Git:
If you no longer need a remote branch you can remove it using the command below:

git push --delete origin branch_name_here


what does git show does:
For commits it shows the log message and textual diff. It also presents the merge commit in a special format.  
Git show describes the HEAD commit by default. 

================================= automate git repo ======================================
#!/bin/bash
#Author: Prof Elvis
#this script will be use to create git repositories
echo -n " please enter the directory name: "
read directory
sudo mkdir $directory
git init $(pwd)/$directory
echo " use your command line terminal to access $directory directory"
echo "And make sure it a git repository to test the script"
ls -a $directory | grep .git #this line helps you to detect a git repository special file
echo " make sure you see the .git file above to confirm that you actually created the repo "
echo " This is a property of group15 members landmarkclass25!!! "




============================ git project correction ============================================

mini-project: individual

1. what is git?
2. what do you understand by version control?
3. How can you contribute to a project in github?
4. create a file called "yourname" and push to your remote repository
5. compelete the following commands by stating their use cases:
- git init --> initialized a git repository
- git pull --> pull the code changes from a remote repository to your local repository
- git push --> use to push your code from local repository to a remote repository
- git add $filename --> use to move $filename from the working area to the staging area within a branch 
- git clone --> use to clone a remote repository to a local environment 
- git branch --> use to show the present branches 
- git branch $branchname --> use to create the branch $branchname
- git branch -d $branchname --> use to delete a branch 
- git checkout --> use to switch between branches
- git checkout -b $branchname --> create a new branch and switch into the branch
- git commit --> use to move codes from staging area into a repository
- git commit -m --> use to pass a commit message
- git switch --> use to switch between branches
- git config --global user.name --> use to set the author global username id 
- git config --global user.email --> use to set author global email id 
- git fetch  --> use to fetch down all the branches from a remote repository
- git remote -v --> use to show the registered remote repository on a local environment 
example; ubuntu@yvangithub:~/practice$ git remote -v
addedrepo       https://github.com/tookiewill33/mafamille.git (fetch)
addedrepo       https://github.com/tookiewill33/mafamille.git (push)

- git remote add --> use to register a remote repository to a local environment
wxample: git remote add "addedrepo" https://github.com/tookiewill33/mafamille.git


NB: Please complete by just one sentence of what each command is use for due friday midnight

 git rebase git merge and git stash:
      git rebase:
      Rebasing is often used as an alternative to merging. Rebasing a branch updates one branch 
      with another by applying the commits of one branch on top of the commits of another branch but rewrites the git history,
      only rebase branches you, and only you, are working on.

      git merge:
      Git merge is a command that allows you to merge branches from Git.

      git diff: use to see the difference between two branches
      git diff $branchname

      git restore --staged: use to bring codes changes from staging area to working area 

      WIP: Work In Progress

      difference between git merge and git rebase:
      The key difference between merge and rebase is that while merge preserves history as it happened, rebase rewrites it.


      git stash:
      While working in a team, there might be situations where you'd have to temporarily put away your current work, to work on something of higher priority, and git stash helps you stash your work away and clear your working directory.
      It helps to understand about the three stages, that your changes are moved to and from in a git repository, before we dive into git stash.
      When you checkout or make new changes they live on the working directory.

      Changes you git add are moved to a staging area from a working directory.
      From there when git commit they are moved to the repository.
      So in between all these stages, git stash pushes all the changes in the working directory to a special directory called stash.

      git stash push -m "Upgrading version" does just that.
      # git stash list
      # This commands lists down all the changes you stashed.

      # git stash show (summarises the stashed ).

      # git stash show -p [<stash>] (shows the exact diff that is stashed).

      # git stash pop [<stash>]
      # Let's find out how we can retrieve changes from a stash to the working directory. 
      # There are two ways to do this: 
      # git stash pop and git stash apply. 
      # pop removes the stash before applying it, apply does the same but doesn't remove the change set from the stash.
